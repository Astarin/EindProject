using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using EindProjectBusinessModels;
using System.Reflection;

namespace EindProjectDAL
{
    class DalMethodes
    {
        // Verijsten
        //1.1.1 Toevoegen van een werknemer     *
        //1.2.1. Toevoegen van een team         *
        //1.2.2 Beheren teamverantwoordelijken  *
        //2.1 Toevoegen van jaarlijkse verloven *
        //2.3.1.1 indien van verlofaanvragen met geldige gegevens en voldoende verlofdagen  *
        //2.3.3 Goedkeuren van verlofaanvragen door teamverantwoordelijken                 * 
        //2.3.5 afkeuren van verlofaanvragen

        //1.1.1 Toevoegen van een werknemer
        public void VoegWerknemerToeAanDb(Werknemer werknemer)
        {
            /*
             * David 16/02/15
             * Werknemer wordt uniek bepaald door personeelsnummer (autogenerated)
             * 2x zelfde werknemer is dus mogelijk en dient niet opgevangen te worden
             * annotations vangen het meeste op.
             * controle of geboortedatum realistisch is => setter 
            */
             using (DbEindproject db = new DbEindproject())
             {
                 try
                 {
                     db.Werknemers.Add(werknemer);
                     db.SaveChanges();
                 }
                 catch
                 {
                     throw new Exception("Probleempje met het toevoegen van een werknemer.");
                 }
             }
        }

        public List<Werknemer> VraagAlleWerknemersOp()
        {
            using (DbEindproject db = new DbEindproject())
            {
                try
                {
                    var tl = from wn in db.Werknemers
                             select wn;
                    return tl.ToList();
                }
                catch
                {
                    throw new Exception("Opvragen alle werknemers niet gelukt.");
                }
            }
        }

        public List<Werknemer> VraagWerknemerOp(int persnr, string naam, string voornaam)
        {
            /*
             * David 16/02/15
             * Opvragen werknemer op basis van 3 mogelijke criteria 
             *   - personeelsnummer
             *   - naam
             *   - voornaam
            */
            using (DbEindproject db = new DbEindproject())
            {
                // alle werknemers
                var tmplijstWN = from wn in db.Werknemers
                                 select wn;

                if (persnr.ToString() != string.Empty)
                {
                    tmplijstWN = from wn in tmplijstWN
                                 where wn.PersoneelsNr == persnr
                                 select wn;

                // tmplijstWN = tmplijstWN.Where(wn => wn.PersoneelsNr == persnr);
                }
                if (naam != string.Empty)
                {
                    tmplijstWN = from wn in tmplijstWN
                                 where wn.Naam.Contains(naam)
                                 select wn;
                }
                if (voornaam != string.Empty)
                {
                    tmplijstWN = from wn in tmplijstWN
                                 where wn.Voornaam.Contains(voornaam)
                                 select wn;
                }

                return tmplijstWN.ToList();
            }
            


            //op naam sorteren
            return new List<Werknemer>(); // todo
        }

        public void WijzigWerknemerProperty(Werknemer werknemer)
        {

            return;
        }

        //1.2.2 Beheren teamverantwoordelijken
        public void VoegTeamToeAanDb(Team team)
        {
            /*
             * David 16/02/15
             * Team wordt bepaald door autogenerated key (Code)
             * zelfde omschrijving kan en dient niet opgevangen (dixit Ann)
            */
            using (DbEindproject db = new DbEindproject())
            {
                try
                {
                    db.Teams.Add(team);
                    db.SaveChanges();
                }
                catch
                {
                    throw new Exception("Het toevoegen van een team is niet gelukt.");
                }
            }
        }


        //1.2.2 Beheren teamverantwoordelijken
        public void BeheerTeamVerantwoordelijke(Werknemer werknemer)
        {
            /*
             * David 16/02/15
             * Huidige teamleader teamleader af maken en
             * geselecteerde werknemer teamleader maken
            */
            var theTeam = werknemer.Team;
            using (DbEindproject db = new DbEindproject())
            {
                var huidigTL = (from wn in db.Werknemers
                                where wn.Team == theTeam
                                   && wn.TeamLeader == true
                                select wn).FirstOrDefault();
                if (huidigTL != null)
                {
                    huidigTL.TeamLeader = false;
                }
                try
                {
                    werknemer.TeamLeader = true;
                    db.SaveChanges();
                }
                catch
                {
                    throw new Exception("Nieuwe teamleader kon niet worden aangesteld.");
                }
            }
            
        }
        
        public List<Werknemer> GeefTeamleden(Team team)
        {
            /*
             * David 16/02/15
             * Geef een lijst van werknemers binnen één bepaald team
            */
            using (DbEindproject db = new DbEindproject())
            {
                try
                {
                    var tl = from wn in db.Werknemers
                             where wn.Team == team
                             select wn;
                    return tl.ToList();
                }
                catch
                {
                    throw new Exception("Opvragen teamleden niet gelukt.");
                }
            }
        }

        //2.1 Toevoegen van jaarlijkse verloven *
        public void SetVerlofWerkNemer(Werknemer werknemer, int verlofDagen, int jaar)
        {

        }

        //2.3.1.1 indien van verlofaanvragen met geldige gegevens en voldoende verlofdagen 
        public Aanvraagstatus IndienenVerlofaanvraag(Werknemer werknemer, VerlofAanvraag verlofaanvraag)
        {
            return Aanvraagstatus.Goedgekeurd;
        }

        //2.3.3 Goedkeuren van verlofaanvragen door teamverantwoordelijken      
        //2.3.5 afkeuren van verlofaanvragen
        public void WijzigStatusVerlofaanvraag(VerlofAanvraag verlofaanvraag, Aanvraagstatus status)
        {

        }







    }
}
